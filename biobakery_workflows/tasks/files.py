"""
bioBakery Workflows: tasks.files module
A collection of file names used by tasks

Copyright (c) 2017 Harvard School of Public Health

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""

import os
import copy

from biobakery_workflows import utilities

class FileInfo(object):
    def __init__(self, name=None, subfolder=None, tag=None, extension=None, description=None):
        # set a list of non-path keywords
        self.non_path_keywords=["description"]
        
        keywords={"names":name, "subfolder":subfolder, "tag":tag, "extension":extension, "description":description}
        self.keywords = {key:value for key, value in keywords.items() if value}
        
    def get_path_keywords(self):
        info = copy.copy(self.keywords)
        
        # remove the non-path keywords
        for key in self.non_path_keywords:
            try:
                del info[key]
            except KeyError:
                pass
        
        return info
    
    def __getitem__(self, key):
        """ Return the file info """
        try:
            value=self.keywords[key]
        except KeyError:
            value=""
        return value

class Workflow(object):
    @classmethod
    def file(cls, name, main_folder, **keywords):
        merged_keywords = copy.copy(keywords)
        merged_keywords.update(cls.file_info[name].get_path_keywords())
        return utilities.name_files(folder=main_folder, **merged_keywords)

class ShotGun(Workflow):
    file_info={}
    
    # set the kneaddata file name
    file_info["kneaddata_read_counts"]=FileInfo("kneaddata_read_count_table.tsv",subfolder="counts",
        description=("A tab-delimited file with samples as rows and read counts as columns. This file ",
            "is generated by compiling information from the KneadData log files. The file contains ",
            "read counts after each step of the Kneaddata workflow. Depending on the input to Kneaddata ",
            "this file will contain counts for single or paired/orphan reads."))

    # set the taxonomy file names
    file_info["taxonomic_profile"]=FileInfo("taxonomic_profiles.tsv",
        description=("A tab-delimited file with samples as columns and relative abundance as rows. This file ",
            "contains the merged taxonomic profiles computed by MetaPhlAn2 for all samples."))
    file_info["species_counts"]=FileInfo("metaphlan2_species_counts_table.tsv",subfolder="counts",
        description=("A tab-delimited file with samples as rows and counts as columns. This file ",
            "contains the counts of total species for each sample using the species identified by MetaPhlAn2."))
    
    # set the merged feature file names
    file_info["genefamilies"]=FileInfo("genefamilies.tsv",
        description=("A tab-delimited file with samples as columns and gene families as rows. This file ",
            " is a merged set of gene families for all samples computed by HUMAnN2. ",
            " This file contains stratified counts as RPKs."))
    file_info["ecs"]=FileInfo("ecs.tsv",
        description=("A tab-delimited file with samples as columns and ecs as rows. This file ",
            " is a merged set of ecs for all samples generated from the gene families computed by HUMAnN2. ",
            " This file contains stratified counts as RPKs."))
    file_info["pathabundance"]=FileInfo("pathabundance.tsv",
        description=("A tab-delimited file with samples as columns and pathways as rows. This file ",
            " is a merged set of pathway abundances for all samples computed by HUMAnN2. ",
            " This file contains stratified counts of non-normalized abundances."))
    
    # set the normed feature file names
    file_info["genefamilies_relab"]=FileInfo("genefamilies_relab.tsv")
    file_info["ecs_relab"]=FileInfo("ecs_relab.tsv")
    file_info["pathabundance_relab"]=FileInfo("pathabundance_relab.tsv")
    
    # set the feature count file names
    file_info["genefamilies_relab_counts"]=FileInfo("humann2_genefamilies_relab_counts.tsv", subfolder="counts")
    file_info["ecs_relab_counts"]=FileInfo("humann2_ecs_relab_counts.tsv", subfolder="counts")
    file_info["pathabundance_relab_counts"]=FileInfo("humann2_pathabundance_relab_counts.tsv", subfolder="counts")
    
    # set the all feature counts file names
    file_info["feature_counts"]=FileInfo("humann2_feature_counts.tsv", subfolder="counts",
        description=("A tab-delimited file with samples as rows and features as columns. This file includes the ",
            " total feature counts (non-stratified) for the features computed by HUMAnN2 (genes, ecs, and pathways)."))
    file_info["humann2_read_counts"]=FileInfo("humann2_read_and_species_count_table.tsv",subfolder="counts",
        description=("A tab-delimited file with samples as rows and counts as columns. This file was created using the ",
                     "HUMAnN2 logs. It includes the total number of species used to generate the custom database, the total ",
                     "number of initial reads, and the total reads aligning for both search steps."))
    
    # set the names for the rna/dna normed files
    file_info["genefamilies_norm_ratio"]=FileInfo("rna_dna_relative_expression_unstratified.tsv",subfolder=os.path.join("norm","genes"),
        description=("A tab-delimited file with samples as columns and genes as rows. This file includes the normalized RNA abundances ",
            " as a ratio to DNA abundance. This file does not include stratified features."))
    file_info["ecs_norm_ratio"]=FileInfo("rna_dna_relative_expression_unstratified.tsv",subfolder=os.path.join("norm","ecs"),
        description=("A tab-delimited file with samples as columns and ecs as rows. This file includes the normalized RNA abundances ",
            " as a ratio to DNA abundance. This file does not include stratified features."))
    file_info["paths_norm_ratio"]=FileInfo("rna_dna_relative_expression_unstratified.tsv",subfolder=os.path.join("norm","paths"),
        description=("A tab-delimited file with samples as columns and pathways as rows. This file includes the normalized RNA abundances ",
            " as a ratio to DNA abundance. This file does not include stratified features."))

    
    