
<% if vars["pdf_format"]: print("\clearpage") %>

# Taxonomic Profiling of Metagenomic Reads

This report section contains information about the taxonomy
for all DNA samples. These samples were
run through [MetaPhlAn](http://huttenhower.sph.harvard.edu/metaphlan).

Taxonomic abundances are passed through a basic filter requiring each species or genus to have at least <%= vars["min_abundance"] %> % abundance in at least <%= vars["min_samples"] %> % of all samples.

```{python, echo=False}
samples, taxonomy, data = utilities.read_metaphlan_profile(document,vars["taxonomic_profile"])

# get the filtered species
species_taxonomy, species_data = utilities.filter_taxa_level_metaphlan_format(taxonomy,data)
filtered_species_taxonomy, filtered_species_data = utilities.filter_taxa_level_metaphlan_format(taxonomy,
    data, min_abundance=vars["min_abundance"], min_samples=vars["min_samples"])

# get the filtered genera
genera_taxonomy, genera_data = utilities.filter_taxa_level_metaphlan_format(taxonomy,data,level=5)
filtered_genera_taxonomy, filtered_genera_data = utilities.filter_taxa_level_metaphlan_format(taxonomy,
    data, min_abundance=vars["min_abundance"], min_samples=vars["min_samples"], level=5)
```

A total of <%= len(species_taxonomy) %> species and <%= len(genera_taxonomy) %> genera were identified. After basic filtering <%= len(filtered_species_taxonomy) %> species and <%= len(filtered_genera_taxonomy) %> genera remained.

## Taxonomic Count Table

```{python, echo=False}

# compile the taxa counts for the table
all_taxa_counts=utilities.compile_taxa_counts(species_data,filtered_species_data,genera_data,filtered_genera_data)

# write a table as a file and also print table to the document
taxa_counts_column_names = ["# Sample","Species","Species filtered","Genera","Genera filtered"]
document.write_table(taxa_counts_column_names, samples, all_taxa_counts,
    files.ShotGunVis.path("taxa_counts",document.data_folder))

table_message=visualizations.show_table_max_rows(document, all_taxa_counts, samples,
    taxa_counts_column_names[1:],"Total taxa per sample",files.ShotGunVis.path("taxa_counts"))
```

<%= table_message %>

<% if vars["pdf_format"]: print("\clearpage") %>

```{python, echo=False}
# search for the alpha diversity plots
alpha_diversity_plots_folder=utilities.find_alpha_diversity_plots(vars["alpha_diversity_plots"]) 
```

<% if alpha_diversity_plots_folder['scatterplot'] or alpha_diversity_plots_folder['boxplot']: print("## Alpha Diversity") %>

<% if alpha_diversity_plots_folder['scatterplot'] or alpha_diversity_plots_folder['boxplot']: print("Alpha diversity, computed with the Inverse Simpson Index, were computed on un-filtered normalized data at the species level. Boxplots were generated for categorical/discrete variables while scatterplots were generated for continuous variables.") %> 

<% if alpha_diversity_plots_folder['boxplot']: print("### Categorical variables ") %>

<% utilities.show_plots(alpha_diversity_plots_folder['boxplot']) %>

<% if alpha_diversity_plots_folder['scatterplot']: print("### Continuous variables ") %>

<% utilities.show_plots(alpha_diversity_plots_folder['scatterplot']) %>

## Ordination

### Species

```{python, echo=False}
top_taxonomy, top_data = utilities.top_rows(species_taxonomy, species_data, vars["max_sets_heatmap"],
    function="average") 

pcoa_data=numpy.array(top_data)/100.0
caption=document.show_pcoa(samples,top_taxonomy,pcoa_data,"PCoA Ordination of top {} species using Bray-Curtis similarity".format(vars["max_sets_heatmap"]))
```

<%= caption %>

```{python, echo=False}
visualizations.show_pcoa_metadata(document, vars, samples, top_taxonomy, pcoa_data,
    title="PCoA Ordination of top {} species".format(vars["max_sets_heatmap"]))
```

<% if vars["pdf_format"]: print("\clearpage") %>

### Genera

```{python, echo=False}
top_taxonomy_genera, top_data_genera = utilities.top_rows(genera_taxonomy, genera_data, vars["max_sets_heatmap"],
    function="average")

pcoa_data_genera=numpy.array(top_data_genera)/100.0
caption_genera=document.show_pcoa(samples,top_taxonomy_genera,pcoa_data_genera,
    "PCoA Ordination of top {} genera using Bray-Curtis similarity".format(vars["max_sets_heatmap"]),feature_types="genera")
```

<%= caption_genera %>

<% if vars["pdf_format"]: print("\clearpage") %>

```{python, echo=False}
visualizations.show_pcoa_metadata(document, vars, samples, top_taxonomy_genera, pcoa_data_genera,
    title="PCoA Ordination of top {} genera".format(vars["max_sets_heatmap"]))
```

## Heatmaps

```{python, echo=False}
visualizations.ShotGun.format_caption("heatmap_intro",max_sets=vars["max_sets_heatmap"],type="species and genera",method="Spearman and Bray-Curtis",data_type="taxa")
```

### Species

```{python, echo=False, f_size=(8,8)}
visualizations.plot_heatmap(document,vars,samples,top_taxonomy,top_data,
    vars["pdf_format"], "Top {} species by average abundance (Spearman)".format(vars["max_sets_heatmap"]),vars["max_sets_heatmap"])
```

<% if vars["pdf_format"]: print("\clearpage") %>

```{python, echo=False, f_size=(8,8)}
visualizations.plot_heatmap(document,vars,samples,top_taxonomy,top_data,
    vars["pdf_format"],"Top {} species by average abundance (Bray-Curtis)".format(vars["max_sets_heatmap"]),vars["max_sets_heatmap"],method="lbraycurtis")
```

### Genera

```{python, echo=False, f_size=(8,8)}
visualizations.plot_heatmap(document,vars,samples,top_taxonomy_genera,top_data_genera,
    vars["pdf_format"], "Top {} genera by average abundance (Spearman)".format(vars["max_sets_heatmap"]),vars["max_sets_heatmap"])
```

<% if vars["pdf_format"]: print("\clearpage") %>

```{python, echo=False, f_size=(8,8)}
visualizations.plot_heatmap(document,vars,samples,top_taxonomy_genera,top_data_genera,
    vars["pdf_format"],"Top {} genera by average abundance (Bray-Curtis)".format(vars["max_sets_heatmap"]),vars["max_sets_heatmap"],method="lbraycurtis")
```

## Barplot

### Species

```{python, echo=False, f_spines = False}
top_taxonomy, top_data = utilities.top_rows(species_taxonomy, species_data, vars["max_sets_barplot"], function="average") 

sorted_data, sorted_samples = visualizations.sort_data(document, top_data, samples)

top_taxonomy, sorted_data = visualizations.fill_taxonomy_other(top_taxonomy, sorted_data)

document.plot_stacked_barchart(sorted_data, row_labels=top_taxonomy, 
    column_labels=sorted_samples, title="Top "+str(vars["max_sets_barplot"])+" species by average abundance",
    ylabel="Relative abundance", legend_title="Species", legend_style="italic")
```

Stacked barplot of  <%= vars["max_sets_barplot"] %> most abundant species among samples. Samples in the plot were sorted on the species with the highest mean abundances among samples, in decreasing order.

```{python, echo=False, f_spines = False}
categorical_metadata = visualizations.plot_grouped_and_average_barplots_taxonomy(document, vars, sorted_samples, sorted_data, top_taxonomy, vars["max_sets_barplot"])
```

<% if categorical_metadata: print("Stacked barplot of species average abundance grouped by metadata.") %>


### Genera

```{python, echo=False, f_spines = False}
top_taxonomy_genera, top_data_genera = utilities.top_rows(genera_taxonomy, genera_data, vars["max_sets_barplot"],
    function="average")

sorted_data_genera, sorted_samples_genera = visualizations.sort_data(document, top_data_genera, samples)

top_taxonomy_genera, sorted_data_genera = visualizations.fill_taxonomy_other(top_taxonomy_genera, sorted_data_genera)

document.plot_stacked_barchart(sorted_data_genera, row_labels=top_taxonomy_genera,
    column_labels=sorted_samples_genera, title="Top "+str(vars["max_sets_barplot"])+" genera by average abundance",
    ylabel="Relative abundance", legend_title="Genera", legend_style="italic")
```

Stacked barplot of  <%= vars["max_sets_barplot"] %> most abundant genera among samples. Samples in the plot were sorted on the genera with the highest mean abundances among samples, in decreasing order.

```{python, echo=False, f_spines = False}
categorical_metadata=visualizations.plot_grouped_and_average_barplots_taxonomy(document, vars, sorted_samples_genera, sorted_data_genera, top_taxonomy_genera, vars["max_sets_barplot"], feature="genera")
```

<% if categorical_metadata: print("Stacked barplot of genera average abundance grouped by metadata.") %>

